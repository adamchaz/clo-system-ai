# CLO Management System - Production Backend Dockerfile
# Multi-stage build for optimized production deployment

# Build stage
FROM python:3.11-slim as builder

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies required for building
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    make \
    libpq-dev \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create and activate virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy and install Python dependencies
COPY requirements.txt /tmp/requirements.txt
RUN pip install --upgrade pip setuptools wheel && \
    pip install -r /tmp/requirements.txt

# Production stage
FROM python:3.11-slim as production

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PATH="/opt/venv/bin:$PATH" \
    ENVIRONMENT=production \
    LOG_LEVEL=INFO

# Install runtime dependencies only
RUN apt-get update && apt-get install -y \
    libpq5 \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user for security
RUN groupadd -r clo && \
    useradd -r -g clo -d /app -s /bin/bash -c "CLO System User" clo

# Copy virtual environment from builder stage
COPY --from=builder /opt/venv /opt/venv

# Create application directories
RUN mkdir -p /app /var/log/clo-system /var/lib/clo-system/uploads && \
    chown -R clo:clo /app /var/log/clo-system /var/lib/clo-system

# Set working directory
WORKDIR /app

# Copy application code
COPY --chown=clo:clo . /app/

# Create directories for certificates and configuration
RUN mkdir -p /app/certs /app/config && \
    chown -R clo:clo /app/certs /app/config

# Switch to non-root user
USER clo

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/api/v1/monitoring/health/live || exit 1

# Production startup command with Gunicorn
CMD ["gunicorn", \
     "--bind", "0.0.0.0:8000", \
     "--workers", "4", \
     "--worker-class", "uvicorn.workers.UvicornWorker", \
     "--worker-timeout", "120", \
     "--keep-alive", "2", \
     "--max-requests", "1000", \
     "--max-requests-jitter", "100", \
     "--preload", \
     "--log-level", "info", \
     "--log-file", "/var/log/clo-system/gunicorn.log", \
     "--access-logfile", "/var/log/clo-system/access.log", \
     "--error-logfile", "/var/log/clo-system/error.log", \
     "--capture-output", \
     "--enable-stdio-inheritance", \
     "app.main:app"]

# Alternative startup for development/debugging
# CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--log-config", "logging.conf"]

# Labels for container metadata
LABEL maintainer="CLO System Team" \
      version="1.0.0" \
      description="CLO Management System API - Production Build" \
      environment="production"