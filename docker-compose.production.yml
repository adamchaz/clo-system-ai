# CLO Management System - Production Docker Compose Configuration
# ðŸ”’ Production deployment with security, monitoring, and scalability

version: '3.8'

services:
  # Production API Backend
  clo-api:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    image: clo-system/api:latest
    container_name: clo-api-prod
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=${PRODUCTION_DATABASE_URL}
      - REDIS_URL=${PRODUCTION_REDIS_URL}
      - SECRET_KEY=${PRODUCTION_SECRET_KEY}
      - JWT_PRIVATE_KEY_PATH=/app/certs/jwt-private-key.pem
      - JWT_PUBLIC_KEY_PATH=/app/certs/jwt-public-key.pem
      - SSL_CERT_PATH=/app/certs/ssl-cert.pem
      - SSL_KEY_PATH=/app/certs/ssl-key.pem
      - LOG_LEVEL=INFO
      - LOG_FILE_PATH=/var/log/clo-system/app.log
      - CORS_ORIGINS=["https://${PRODUCTION_DOMAIN}","https://www.${PRODUCTION_DOMAIN}"]
    volumes:
      # SSL Certificates
      - ${SSL_CERTS_PATH}:/app/certs:ro
      # Application logs
      - clo-logs:/var/log/clo-system
      # File uploads (if using local storage)
      - clo-uploads:/var/lib/clo-system/uploads
    networks:
      - clo-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/monitoring/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"
        labels: "service=clo-api"

  # Production Frontend
  clo-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
    image: clo-system/frontend:latest
    container_name: clo-frontend-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      - REACT_APP_API_URL=https://${PRODUCTION_DOMAIN}/api/v1
      - REACT_APP_WEBSOCKET_URL=wss://${PRODUCTION_DOMAIN}/ws
      - REACT_APP_ENVIRONMENT=production
    volumes:
      # SSL Certificates for nginx
      - ${SSL_CERTS_PATH}:/etc/nginx/ssl:ro
      # nginx configuration
      - ./frontend/nginx.production.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - clo-network
    depends_on:
      - clo-api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
        labels: "service=clo-frontend"

  # Production PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: clo-postgres-prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${PRODUCTION_POSTGRES_DB}
      - POSTGRES_USER=${PRODUCTION_POSTGRES_USER}
      - POSTGRES_PASSWORD=${PRODUCTION_POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      # Persistent database storage
      - postgres-data:/var/lib/postgresql/data
      # Database initialization scripts
      - ./backend/sql/init-production.sql:/docker-entrypoint-initdb.d/init.sql:ro
      # PostgreSQL configuration
      - ./infrastructure/postgres/postgresql.production.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - clo-network
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c shared_preload_libraries=pg_stat_statements
      -c log_statement=all
      -c log_min_duration_statement=1000
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PRODUCTION_POSTGRES_USER} -d ${PRODUCTION_POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    logging:
      driver: "json-file"
      options:
        max-size: "200m"
        max-file: "10"
        labels: "service=postgres"

  # Production Redis Cache
  redis:
    image: redis:7-alpine
    container_name: clo-redis-prod
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${PRODUCTION_REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      # Persistent Redis data
      - redis-data:/data
      # Redis configuration
      - ./infrastructure/redis/redis.production.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - clo-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${PRODUCTION_REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
        labels: "service=redis"

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: clo-prometheus-prod
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.production.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - clo-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: clo-grafana-prod
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - clo-network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M

  # Log Aggregation - ELK Stack (Optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: clo-elasticsearch-prod
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - clo-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: clo-backup-prod
    restart: "no"
    environment:
      - PGPASSWORD=${PRODUCTION_POSTGRES_PASSWORD}
    volumes:
      - ./scripts/backup-production.sh:/backup.sh:ro
      - clo-backups:/backups
    networks:
      - clo-network
    depends_on:
      - postgres
    command: >
      sh -c "
        while true; do
          echo 'Starting backup at $(date)'
          /backup.sh
          echo 'Backup completed at $(date)'
          sleep 86400  # Sleep for 24 hours
        done
      "

# Production Network Configuration
networks:
  clo-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Production Volume Configuration
volumes:
  postgres-data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '${PRODUCTION_DATA_PATH}/postgres'
  
  redis-data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '${PRODUCTION_DATA_PATH}/redis'
  
  clo-logs:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '${PRODUCTION_LOG_PATH}'
  
  clo-uploads:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '${PRODUCTION_UPLOAD_PATH}'
  
  clo-backups:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '${PRODUCTION_BACKUP_PATH}'
  
  prometheus-data:
    driver: local
  
  grafana-data:
    driver: local
  
  elasticsearch-data:
    driver: local